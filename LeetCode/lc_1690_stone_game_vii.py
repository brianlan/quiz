from functools import lru_cache
from itertools import accumulate
from typing import List
import numpy as np
import os
from loguru import logger
import time


class Solution:
    """Raw solution implement by myself, will OT."""
    @lru_cache(maxsize=None)
    def _sum(self, start, end):
        # logger.debug(f"sum({start}, {end})")
        if end - start == 1:
            return self.stones[start]
        return self._sum(start, end - 1) + self._sum(end - 1, end)

    def stoneGameVII(self, stones: List[int]) -> int:
        t0 = time.time()
        n = len(stones)
        self.stones = stones
        d = [[0] * n for _ in range(n)]  # means maximal difference
        for i in range(n):
            d[i][i] = 0
        for span in range(1, n):
            for i in range(n - span):
                j = i + span
                d[i][j] = max(
                    -d[i + 1][j] + self._sum(i + 1, j + 1),
                    -d[i][j - 1] + self._sum(i, j - 1 + 1)
                )
                # logger.debug(f"d[{i}][{j}] = max(-d[{i + 1}][{j}] + self._sum({i + 1}, {j + 1}), -d[{i}][{j - 1}] + self._sum({i}, {j - 1 + 1}))")
        logger.info(f"time spent: {(time.time() - t0) * 1000:.2f} ms")
        return d[0][n - 1]


class Solution2:
    """
    Solution shared by others. 
    https://leetcode-cn.com/problems/stone-game-vii/solution/bo-yi-dp-by-amazingt-vlrt/
    """
    def stoneGameVII(self, stones: List[int]) -> int:
        t0 = time.time()
        n = len(stones)
        presum = [0] * (n+1)
        for i in range(1,n+1):
            presum[i] = stones[i-1] + presum[i-1]
        dp = [[0] * n for _ in range(n)]
        for i in range(n - 2, -1, -1):
            for j in range(i + 1, n):
                l = presum[j+1] - presum[i+1]
                r = presum[j] - presum[i]
                dp[i][j] = max(l-dp[i + 1][j], r-dp[i][j-1])
        logger.info(f"time spent: {(time.time() - t0) * 1000:.2f} ms")
        return dp[0][n-1]


class Solution3:
    """Rewrite based on Solution, but optimized how to calc sum."""
    def stoneGameVII(self, stones: List[int]) -> int:
        t0 = time.time()
        n = len(stones)
        self.stones = stones
        d = [[0] * n for _ in range(n)]  # means maximal difference
        cumsum = [0] + list(accumulate(stones))
        for i in range(n):
            d[i][i] = 0
        for span in range(1, n):
            for i in range(n - span):
                j = i + span
                score_when_take_left = cumsum[j + 1] - cumsum[i + 1]
                score_when_take_right = cumsum[j] - cumsum[i]
                d[i][j] = max(
                    -d[i + 1][j] + score_when_take_left,
                    -d[i][j - 1] + score_when_take_right
                )
                # logger.debug(f"d[{i}][{j}] = max(-d[{i + 1}][{j}] + self._sum({i + 1}, {j + 1}), -d[{i}][{j - 1}] + self._sum({i}, {j - 1 + 1}))")
        logger.info(f"time spent: {(time.time() - t0) * 1000:.2f} ms")
        return d[0][n - 1]



if __name__ == "__main__":
    # print(Solution3().stoneGameVII([5, 3, 1, 4, 2]))
    # print(Solution2().stoneGameVII([7, 90, 5, 1, 100, 10, 10, 2]))
    # print(Solution2().stoneGameVII([213,513,451,959,859,919,345,59,5,544,820,742,739,638,375,20,652,929,323,673,285,517,315,659,951,452,107,66,468,374,977,453,76,215,540,371,528,85,672,238,302,551,327,819,817,437,952,558,218,907,715,603,615,946,198,319,685,79,86,561,284,97,607,276,902,652,977,774,212,784,568,543,711,917,561,533,850,383,36,230,149,108,205,222,340,348,350,256,238,316,810,931,128,954,102,624,790,891,648,258,371,241,425,656,450,678,918,30,520,944,307,840,755,642,445,658,514,261,63,542,258,368,339,377,596,866,831,665,875,133,60,123,56,708,640,755,265,845,42,189,878,682,359,802,552,88,982,9,496,751,515,791,198,911,714,505,878,789,755,816,118,298,373,912,236,597,301,466,366,622,473,181,859,78,332,330,559,749,973,635,873,426,935,277,187,893,612,526,165,331,817,776,983,791,784,916,634,464,134,517,527,289,476,405,541,80,934,445,165,449,952,7,167,91,427,638,126,225,481,346,455,215,50,407,380,46,506,631,576,688,665,328,922,497,513,291,35,988,752,857,195,318,185,365,86,644,90,812,322,765,631,72,442,89,977,812,21,637,227,16,58,883,339,677,739,96,33,374,760,747,655,43,593,809,491,610,354,758,474,836,309,418,234,129,479,163,962,844,854,996,824,54,277,786,434,215,930,123,670,303,921,365,50,160,600,856,561,623,4,336,586,673,313,423,728,893,970,880,828,19,311,241,239,116,742,116,78,635,563,916,315,353,107,302,317,131,499,994,869,633,587,168,708,569,669,125,84,565,40,41,426,286,528,562,789,126,489,181,492,90,129,347,697,158,67,571,472,529,691,370,579,189,568,665,334,449,492,324,807,132,692,917,474,13,944,365,848,786,879,866,527,709,173,611,604,123,447,988,301,489,682,218,315,585,842,255,598,753,26,787,136,756,482,932,706,540,593,689,578,926,103,736,499,908,123,885,360,790,845,759,648,480,458,330,15,53,631,749,73,568,468,864,206,437,377,341,288,844,64,133,507,204,11,15,99,616,265,360,22,628,498,977,106,244,620,591,312,644,163,109,264,396,653,214,992,455,350,136,551,821,144,64,836,596,902,786,990,661,479,219,370,176,505,384,495,680,472,413,838,906,859,109,429,419,697,261,162,667,989,40,549,380,46,166,898,826,261,95,748,197,514,370,547,730,309,132,264,330,385,664,87,20,492,774,198,635,347,181,718,194,483,846,773,882,752,795,660,615,572,78,557,123,239,577,482,556,349,875,943,732,82,58,151,120,164,150,563,722,576,592,527,775,395,733,951,434,987,262,696,548,55,375,771,908,522,546,399,825,683,788,776,409,460,486,358,129,830,918,308,91,50,257,881,336,115,923,977,537,747,817,731,164,948,899,879,121,29,885,157,275,113,51,576,733,176,843,66,221,842,323,199,718,663,391,369,490,160,107,752,820,12,492,513,747,34,454,60,420,574,399,193,527,832,240,787,350,730,793,575,432,73,226,77,191,916,9,258,545,947,975,259,867,756,148,132,46,144,849,854,715,504,842,387,132,211,475,127,596,521,603,774,518,930,769,640,729,839,39,361,471,708,467,865,797,915,255,242,314,917,791,124,901,606,831,400,225,443,80,310,978,787,480,532,427,855,962,876,450,182,648,386,973,228,882,202,131,638,67,563,178,234,758,622,972,996,38,528,190,150,395,692,812,947,686,308,461,62,775,641,997,616,348,483,119,417,7,783,998,167,153,948,491,86,296,51,432,399,292,591,806,514,239,926,124,373,345,925,608,812,675,115,919,223,96,980,365,372,259,616,390,674,322,721,693,111,960,976,707,9,1,474,167,555,154,429,541,270,686,915,508,27,493,656,691,716,836,277,330,600,55,301,75,500,558,49,320,263,225,102,288,835,575,173,836,597,429,288,664,397,814,441,100,279,538,752,483,846,527,374,216,379]))
    print(Solution3().stoneGameVII([249,595,13,199,880,556,635,577,194,629,273,67,592,210,106,895,700,803,260,608,364,691,882,570,336,937,7,446,752,547,594,861,261,135,401,388,315,909,987,871,207,832,989,765,848,1,951,67,414,133,508,59,426,881,597,828,151,148,817,461,121,543,745,984,387,499,165,851,521,738,932,25,383,164,312,992,909,487,87,528,136,493,760,483,595,451,794,800,414,335,517,387,621,252,879,135,659,451,629,562,812,929,517,611,198,696,922,538,57,56,107,333,158,699,121,842,588,155,263,286,756,889,52,469,380,789,393,927,214,70,108,758,537,884,952,612,813,437,10,340,816,687,745,989,560,882,208,879,618,947,811,573,243,174,664,970,490,76,525,681,325,764,624,582,23,383,339,324,575,627,602,104,140,491,131,531,409,382,58,83,840,597,423,726,229,892,629,99,915,250,692,630,33,200,322,443,866,916,974,176,331,884,315,440,172,920,501,432,587,978,341,200,800,49,592,480,208,50,722,111,555,112,610,738,295,130,282,483,977,756,225,853,166,882,95,415,440,730,253,61,883,964,91,776,673,250,843,266,573,82,630,46,359,618,230,560,21,44,703,183,190,20,332,906,480,339,881,417,432,259,189,828,393,533,504,662,408,135,377,631,419,591,349,112,977,624,59,1000,278,492,881,671,471,80,749,379,327,403,715,679,889,185,474,168,979,285,747,960,173,449,723,77,179,59,700,430,215,805,756,492,618,89,750,226,484,404,159,794,595,715,436,184,926,888,55,212,1000,392,169,676,1,65,790,259,915,537,362,744,657,681,178,618,459,423,171,428,931,798,880,769,363,52,547,843,537,220,772,502,439,40,139,935,462,311,139,870,847,490,860,198,211,247,246,841,531,553,973,88,689,655,907,898,86,223,279,739,566,245,3,144,849,718,549,5,732,583,902,216,648,867,64,838,359,961,185,807,432,780,480,773,282,69,771,982,150,928,277,176,770,477,545,108,594,579,186,325,829,543,21,609,649,893,763,270,947,384,411,485,933,150,966,729,822,661,399,406,578,487,935,434,756,832,26,772,341,211,659,534,506,570,763,224,80,623,683,949,898,995,714,534,964,640,473,322,193,7,173,329,248,103,625,917,142,236,166,731,80,656,927,242,992,12,839,126,192,172,578,225,559,464,304,882,655,184,531,801,692,212,305,727,23,227,523,366,925,366,25,720,191,499,606,166,340,738,1,40,795,255,968,321,536,774,750,566,641,533,850,70,516,405,397,346,178,155,241,610,322,575,480,519,45,303,399,442,345,486,480,130,630,507,759,522,690,399,235,853,646,852,995,36,117,682,642,337,724,1,992,437,959,290,730,749,643,964,499,815,262,916,45,334,502,925,959,810,217,275,516,171,609,716,857,512,234,653,206,22,660,985,566,150,520,812,941,98,697,473,647,714,693,365,420,725,376,533,710,194,571,670,223,246,649,724,963,283,539,647,154,48,766,209,412,680,184,651,736,724,492,380,574,883,166,54,385,132,912,113,842,719,565,662,899,765,118,965,155,50,100,666,193,441,408,225,439,521,738,399,530,978,531,152,921,11,129,698,833,321,691,709,821,310,299,100,588,759,872,778,644,883,652,433,863,833,920,734,324,577,820,120,615,126,261,275,627,871,387,43,776,509,968,605,443,48,169,172,458,647,530,557,709,982,117,140,598,603,315,26,111,179,399,444,430,201,693,172,242,846,34,339,84,299,252,690,876,638,920,453,652,11,43,205,390,601,771,666,384,909,322,270,797,85,417,22,175,216,638,468,309,237,526,77,459,146,946,892,639,815,69,959,344,731,939,914,33,333,265,802,277,361,212,518,566,1000,994,506,624,248,384,207,199,327,572,316,861,691,309,514,140,34,37,756,95,153,138,677,489,709,858,227,386,35,272,627,995,157,845,953,670,272,936,807,521,327,379,360,971,983,73,707,614,923,667,966,501,80,227,894,221,214,76,572,159,932,470,704,361,372,96,285,912,848,570,329,808,378,993,504,620,450,237,539,240,258,665,91,454,515,323,19,808,493,799,760,694,57,702,674,348,331,528,737,13,183,465]))
